"""
Django settings for byos_django project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path

from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
env = load_dotenv(BASE_DIR / ".env")

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY", "django-insecure-192jds")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", "false").lower() == "true"

ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", "127.0.0.1").split(",")

# Application definition

INSTALLED_APPS = [
    "daphne",
    "django.contrib.auth",
    "django.contrib.admin",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "scheduler",
    "trmnl",
    "plugins",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "trmnl.middleware.ApiKeyAuthMiddleware",
]

ROOT_URLCONF = "byos_django.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "templates",
            os.path.join(BASE_DIR, "trmnl", "templates"),
            os.path.join(BASE_DIR, "plugins", "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "byos_django.wsgi.application"
ASGI_APPLICATION = "byos_django.asgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.environ.get("DB_FILE", BASE_DIR / "db.sqlite3"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = BASE_DIR / "static"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# application specific
PW_SERVER = os.environ.get("PW_SERVER")

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

CSRF_TRUSTED_ORIGINS = os.environ.get("CSRF_TRUSTED_ORIGINS", "").split(",")


if not CSRF_TRUSTED_ORIGINS or CSRF_TRUSTED_ORIGINS == [""]:
    CSRF_TRUSTED_ORIGINS = []
    for host in ALLOWED_HOSTS:
        CSRF_TRUSTED_ORIGINS.append(f"http://{host}")
        CSRF_TRUSTED_ORIGINS.append(f"http://{host}:8000")

# Scheduler
# SCHEDULER_QUEUES = {
#     'default': {
#         'HOST': 'redis',
#         'PORT': 6379,
#         'DB': 0,
#         'DEFAULT_TIMEOUT': 360,
#         'CLIENT_KWARGS': {  # Eventual additional Redis connection arguments
#             'ssl_cert_reqs': None,
#         },
#         'TOKEN_VALIDATION_METHOD': None,  # Method to validate auth-header
#     }
# }
# SCHEDULER_CONFIG = {
#     'EXECUTIONS_IN_PAGE': 20,
#     'DEFAULT_RESULT_TTL': 500,
#     'DEFAULT_TIMEOUT': 300,  # 5 minutes
#     'SCHEDULER_INTERVAL': 10,  # 10 seconds
#     'BROKER': 'redis', #
# }
SCHEDULER_CONFIG = {
    "EXECUTIONS_IN_PAGE": 20,
    "DEFAULT_RESULT_TTL": 500,
    "DEFAULT_TIMEOUT": 300,  # 5 minutes
    "SCHEDULER_INTERVAL": 10,  # 10 seconds
}
SCHEDULER_QUEUES = {
    "default": {
        "HOST": "redis",
        "PORT": 6379,
        "DB": 0,
        "DEFAULT_TIMEOUT": 360,
    },
}


LOGGING_VERBOSE_BASE = os.getenv("LOGGING_VERBOSE_BASE", "INFO")

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "base": {
            "format": (
                "%(asctime)s [%(name)s] [%(levelname)s] "
                + "filename=%(filename)s lineno=%(lineno)s "
                + "funcname=%(funcName)s - %(message)s"
            ),
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "base",
        },
        # "file" : {
        #     "class": "logging.FileHandler",
        #     "filename": "/code/web/debug.log",
        #     "formatter": "base",
        #     "mode": "w",
        # }
    },
    "loggers": {
        "": {  # root logger
            "level": LOGGING_VERBOSE_BASE,
            "handlers": ["console"],
        },
        # "daphne": {
        #     "level": "DEBUG",
        # },
    },
}
